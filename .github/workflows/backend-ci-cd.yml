name: Backend CI/CD

# main, dev 브랜치에 push 되거나 PR이 생성될 때 실행
on:
  push:
    branches: [main, dev]
    paths:
      - '**'
  pull_request:
    branches: [main, dev]
    types: [opened, reopened, closed, synchronize]
    paths:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest  # Ubuntu 최신 버전에서 실행
    defaults:
      run:
        working-directory: ./BE

    steps:
    # 코드 체크아웃
    - uses: actions/checkout@v3
    
    # JDK 17 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'zulu'  # Zulu OpenJDK 사용
        cache: 'gradle'  # Gradle 캐싱으로 빌드 속도 향상
        
    # gradlew 실행 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    # Gradle로 프로젝트 빌드
    - name: Build with Gradle
      run: ./gradlew build
      
  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      # AWS 인증 정보 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2  # 서울 리전
          
      # 빌드된 파일을 S3에 업로드
      - name: Upload to S3
        run: |
          aws deploy push \
            --application-name youtube-app \
            --s3-location s3://youtube-deploy/youtube-app.zip \
            --source .
            
      # EC2에 배포
      - name: Deploy to EC2
        run: |
          aws deploy create-deployment \
            --application-name youtube-app \
            --deployment-group-name youtube-group \
            --s3-location bucket=youtube-deploy,key=youtube-app.zip,bundleType=zip
