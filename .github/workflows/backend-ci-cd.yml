name: Backend CI/CD  # CI/CD 파이프라인의 이름

# main, dev 브랜치에 push 되거나 PR이 생성/수정될 때 실행되는 트리거 설정
on:
  push:
    branches: [main, dev]  # main과 dev 브랜치에 push될 때
    paths:
      - '**'  # 모든 경로의 파일 변경 감지
  pull_request:
    branches: [main, dev]  # main과 dev 브랜치로의 PR
    types: [opened, reopened, closed, synchronize]  # PR 이벤트 타입들
    paths:
      - '**'  # 모든 경로의 파일 변경 감지

jobs:
  build:  # 빌드 작업 정의
    runs-on: ubuntu-latest  # Ubuntu 최신 버전에서 실행
    defaults:
      run:
        working-directory: .  # 작업 디렉토리 설정

    steps:
      - uses: actions/checkout@v3  # 소스 코드 체크아웃

      - name: Validate Gradle wrapper  # Gradle Wrapper 검증
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 17  # JDK 17 설정
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'  # Zulu OpenJDK 사용
          cache: 'gradle'  # Gradle 캐싱으로 빌드 속도 향상

      - name: Grant execute permission for gradlew  # gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: Run tests  # 테스트 실행
        env:
          # AWS 관련 설정
          AWS_ACCESS_KEY: ${{ secrets.TEST_AWS_ACCESS_KEY }}  # 테스트용 AWS 접근 키
          AWS_SECRET_KEY: ${{ secrets.TEST_AWS_SECRET_KEY }}  # 테스트용 AWS 시크릿 키
          AWS_REGION: ap-northeast-2  # AWS 서울 리전
          AWS_S3_BUCKET: test-bucket  # 테스트용 S3 버킷
          AWS_STACK_AUTO: false  # AWS 스택 자동 생성 비활성화

          # JWT 관련 설정
          JWT_SECRET_KEY: 7134743777217A25432A462D4A614E645267556B58703272357538782F413F4428472B4B6250655368566D597133743677397A244326452948404D635166546A  # JWT 시크릿 키
          JWT_EXPIRATION: 3600000  # JWT 만료 시간 (1시간)
          JWT_REFRESH_EXPIRATION: 86400000  # JWT 리프레시 토큰 만료 시간 (24시간)

          # Spring 프로필 설정
          SPRING_PROFILES_ACTIVE: test  # 테스트 프로필 활성화
        run: ./gradlew test --stacktrace  # 테스트 실행 (상세 로그 출력)

      - name: Build with Gradle  # Gradle로 프로젝트 빌드
        if: success()  # 테스트 성공 시에만 실행
        run: ./gradlew build -x test  # 테스트 제외하고 빌드

      - name: Upload test results  # 테스트 결과 업로드
        if: always()  # 항상 실행
        uses: actions/upload-artifact@v3
        with:
          name: test-results  # 결과물 이름
          path: build/reports/tests/test  # 테스트 결과 경로

deploy:
  needs: build  # build job이 성공적으로 완료된 후에만 실행
  # main 브랜치로의 직접 push 또는 PR이 병합될 때만 배포 실행
  if: github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
  runs-on: ubuntu-latest  # Ubuntu 최신 버전에서 실행
  steps:
    # 소스 코드와 appspec.yml 파일을 가져오기 위한 체크아웃
    - uses: actions/checkout@v3

    # AWS 자격 증명 설정
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # GitHub Secrets에서 AWS 접근 키 가져오기
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # GitHub Secrets에서 AWS 시크릿 키 가져오기
        aws-region: ap-northeast-2  # AWS 서울 리전 설정

    # 애플리케이션 파일들을 zip으로 압축하여 S3에 업로드
    - name: Upload to S3
      run: |
        aws deploy push \
          --application-name youtube-app \  # CodeDeploy 애플리케이션 이름
          --s3-location s3://youtube-deploy/youtube-app.zip \  # S3 버킷 위치
          --source .  # 현재 디렉토리의 모든 파일

    # S3에 업로드된 파일을 EC2 인스턴스에 배포
    - name: Deploy to EC2
      run: |
        aws deploy create-deployment \
          --application-name youtube-app \  # CodeDeploy 애플리케이션 이름
          --deployment-group-name youtube-group \  # CodeDeploy 배포 그룹
          --s3-location bucket=youtube-deploy,key=youtube-app.zip,bundleType=zip  # S3에 업로드된 파일 위치
