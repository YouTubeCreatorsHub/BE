name: Backend CI/CD  # CI/CD 파이프라인 이름

# GitHub Actions 트리거 설정
on:
  push:
    branches: [main, dev]  # main과 dev 브랜치에 push 발생 시
    paths:
      - '**'  # 모든 경로의 파일 변경 감지
  pull_request:
    branches: [main, dev]  # main과 dev 브랜치로의 PR
    types: [opened, reopened, closed, synchronize]  # PR 이벤트 타입 지정
    paths:
      - '**'  # 모든 경로의 파일 변경 감지

jobs:
  build:  # 빌드 작업 정의
    runs-on: ubuntu-22.04  # Ubuntu 버전 명시적 지정
    environment: development  # development 환경 사용
    defaults:
      run:
        working-directory: .  # 작업 디렉토리 설정

    steps:
      - uses: actions/checkout@v3  # 소스 코드 체크아웃

      # AWS 자격증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # Parameter Store에 시크릿 저장
      - name: Store secrets in Parameter Store
        run: |
          aws ssm put-parameter --name /development/AWS_ACCESS_KEY_ID --value ${{ secrets.AWS_ACCESS_KEY_ID }} --type SecureString --overwrite
          aws ssm put-parameter --name /development/AWS_SECRET_ACCESS_KEY --value ${{ secrets.AWS_SECRET_ACCESS_KEY }} --type SecureString --overwrite
          aws ssm put-parameter --name /development/AWS_S3_BUCKET --value ${{ secrets.AWS_S3_BUCKET }} --type SecureString --overwrite
          aws ssm put-parameter --name /development/JWT_SECRET_KEY --value ${{ secrets.JWT_SECRET_KEY }} --type SecureString --overwrite
          aws ssm put-parameter --name /development/JWT_EXPIRATION --value ${{ secrets.JWT_EXPIRATION }} --type SecureString --overwrite
          aws ssm put-parameter --name /development/JWT_REFRESH_EXPIRATION --value ${{ secrets.JWT_REFRESH_EXPIRATION }} --type SecureString --overwrite
          aws ssm put-parameter --name /development/SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE --value "10MB" --type String --overwrite
          aws ssm put-parameter --name /development/SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE --value "10MB" --type String --overwrite

      # Gradle 빌드 관련 단계들...
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        env:
          SPRING_PROFILES_ACTIVE: test
        run: ./gradlew test --stacktrace

      - name: Build with Gradle
        if: success()
        run: ./gradlew build -x test

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: jar-file
          path: build/libs/*.jar

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/reports/tests/test

  deploy:  # 배포 작업 정의
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    runs-on: ubuntu-22.04
    environment: development

    steps:
      - uses: actions/checkout@v3

      - name: Create build directory
        run: mkdir -p build/libs

      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: jar-file
          path: build/libs

      # AWS 자격증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # Parameter Store에 시크릿 저장 (파일 업로드 설정 포함)
      - name: Store secrets in Parameter Store
        run: |
          aws ssm put-parameter --name /development/AWS_ACCESS_KEY_ID --value ${{ secrets.AWS_ACCESS_KEY_ID }} --type SecureString --overwrite
          aws ssm put-parameter --name /development/AWS_SECRET_ACCESS_KEY --value ${{ secrets.AWS_SECRET_ACCESS_KEY }} --type SecureString --overwrite
          aws ssm put-parameter --name /development/AWS_S3_BUCKET --value ${{ secrets.AWS_S3_BUCKET }} --type SecureString --overwrite
          aws ssm put-parameter --name /development/JWT_SECRET_KEY --value ${{ secrets.JWT_SECRET_KEY }} --type SecureString --overwrite
          aws ssm put-parameter --name /development/JWT_EXPIRATION --value ${{ secrets.JWT_EXPIRATION }} --type SecureString --overwrite
          aws ssm put-parameter --name /development/JWT_REFRESH_EXPIRATION --value ${{ secrets.JWT_REFRESH_EXPIRATION }} --type SecureString --overwrite
          aws ssm put-parameter --name /development/SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE --value "10MB" --type String --overwrite
          aws ssm put-parameter --name /development/SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE --value "10MB" --type String --overwrite

      - name: Upload to S3
        run: |
          aws deploy push \
            --application-name youtube-app \
            --s3-location s3://youtube-deploy/youtube-app.zip \
            --source .

      - name: Deploy to EC2
        run: |
          aws deploy create-deployment \
            --application-name youtube-app \
            --deployment-group-name youtube-group \
            --s3-location bucket=youtube-deploy,key=youtube-app.zip,bundleType=zip